import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.dao.database import async_session_maker
from app.auth.dao import UsersDAO, SessionDAO
from app.auth.schemas import UserTelegramID
from app.config import settings
from app.auth.redis_session import init_redis_session_service
from app.tasks.cleanup import broker as cleanup_broker

async def login_to_account(telegram_id: int = None, username: str = None, full_name: str = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç
    
    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Telegram username (–±–µ–∑ @)
        full_name: –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not any([telegram_id, username, full_name]):
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: telegram_id, username –∏–ª–∏ full_name")
        return None
    
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
    if settings.USE_REDIS:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
        try:
            await cleanup_broker.start()
            await init_redis_session_service(cleanup_broker)
            print("‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            settings.USE_REDIS = False
    else:
        print("üîß Redis –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        async with async_session_maker() as session:
            users_dao = UsersDAO(session)
            session_dao = SessionDAO(session)
            
            user = None
            
            # –ü–æ–∏—Å–∫ –ø–æ Telegram ID (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
            if telegram_id:
                user = await users_dao.find_one_or_none(
                    filters=UserTelegramID(telegram_id=telegram_id)
                )
                if user:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID: {telegram_id}")
            
            # –ü–æ–∏—Å–∫ –ø–æ username
            elif username:
                user = await users_dao.find_one_or_none(
                    filters={"telegram_username": username}
                )
                if user:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ username: @{username}")
            
            # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
            elif full_name:
                user = await users_dao.find_one_or_none(
                    filters={"full_name": full_name}
                )
                if user:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ –§–ò–û: {full_name}")
            
            if not user:
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_token = await session_dao.create_session(user.id)
            
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}")
            print(f"üÜî ID –≤ –ë–î: {user.id}")
            print(f"üì± Telegram ID: {user.telegram_id}")
            print(f"üë§ Username: @{user.telegram_username}")
            print(f"üé≠ –†–æ–ª—å: {user.role.name if user.role else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
            print(f"üîë –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏: {session_token}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—É–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            cookies = {
                "session_token": session_token,
                "session_token_alt": session_token
            }
            
            print(f"\nüç™ –ö—É–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
            for name, value in cookies.items():
                print(f"{name}={value}; path=/; max-age=604800")
            
            print(f"\nüìã –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"\nüîß JavaScript –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (F12 ‚Üí Console):")
            print(f'document.cookie = "session_token={session_token}; path=/; max-age=604800";')
            print(f'document.cookie = "session_token_alt={session_token}; path=/; max-age=604800";')
            print(f'location.reload();')
            
            print(f"\nüì° –ö–æ–º–∞–Ω–¥—ã curl:")
            print(f'# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è')
            print(f'curl -X GET "http://localhost:8000/api/auth/me" -H "Cookie: session_token={session_token}"')
            print(f'# –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏')
            print(f'curl -X GET "http://localhost:8000/api/auth/profile" -H "Cookie: session_token={session_token}"')
            print(f'# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
            print(f'curl -X GET "http://localhost:8000/api/auth/commands" -H "Cookie: session_token={session_token}"')
            
            print(f"\nüåê –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
            print(f'http://localhost:8000')
            print(f'–ò –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å (F12 ‚Üí Console):')
            print(f'document.cookie = "session_token={session_token}; path=/; max-age=604800"; document.cookie = "session_token_alt={session_token}; path=/; max-age=604800"; location.reload();')
            
            return {
                "user": user,
                "token": session_token,
                "cookies": cookies
            }
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis broker –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        if settings.USE_REDIS:
            try:
                await cleanup_broker.stop()
                print("üîß Redis broker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Redis broker: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç HSE RUN")
    parser.add_argument("--telegram-id", type=int, help="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("--username", type=str, help="Telegram username (–±–µ–∑ @)")
    parser.add_argument("--full-name", type=str, help="–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    args = parser.parse_args()
    
    if not any([args.telegram_id, args.username, args.full_name]):
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä:")
        print("  --telegram-id 123456789")
        print("  --username username")
        print("  --full-name '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'")
        return
    
    result = asyncio.run(login_to_account(
        telegram_id=args.telegram_id,
        username=args.username,
        full_name=args.full_name
    ))

if __name__ == "__main__":
    main() 