import os
import sys
from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from sqladmin import Admin, ModelView
from sqladmin.authentication import AuthenticationBackend
from starlette.requests import Request
from starlette.responses import RedirectResponse
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))
sys.path.append('/projects/hse_run_full/backend')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
from app.auth.models import (
    User, Role, Command, CommandsUser, UserProfile, 
    Event, RoleUserCommand, CommandInvite
)

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Language –¥–ª—è –±–æ—Ç–∞ –±–µ–∑ —Å–≤—è–∑–µ–π
from sqlalchemy.orm import Mapped, mapped_column
from app.dao.database import Base, str_uniq

class BotLanguage(Base):
    """–ú–æ–¥–µ–ª—å Language –¥–ª—è –±–æ—Ç–∞ –±–µ–∑ —Å–≤—è–∑–µ–π —Å –±–ª–æ–∫–∞–º–∏"""
    __tablename__ = 'languages'
    __table_args__ = {'extend_existing': True}
    
    name: Mapped[str_uniq]
    
    def __repr__(self):
        return f"{self.name}"

from app.logger import logger
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏ –±–æ—Ç–∞
BOT_ADMIN_USERNAME = os.getenv("BOT_ADMIN_USERNAME", "bot_admin")
BOT_ADMIN_PASSWORD = os.getenv("BOT_ADMIN_PASSWORD", "bot_admin123")
SECRET_KEY = os.getenv("BOT_ADMIN_SECRET_KEY", "bot-registration-admin-secret-key")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è)
BOT_DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./registration_bot.db")
bot_engine = create_async_engine(BOT_DATABASE_URL, echo=False)
bot_session_maker = async_sessionmaker(bot_engine, expire_on_commit=False)


class BotAdminAuth(AuthenticationBackend):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞"""
    
    async def login(self, request: Request) -> bool:
        form = await request.form()
        username, password = form["username"], form["password"]
        
        if username == BOT_ADMIN_USERNAME and password == BOT_ADMIN_PASSWORD:
            request.session.update({"bot_admin_token": "authenticated"})
            return True
        return False

    async def logout(self, request: Request) -> bool:
        request.session.clear()
        return True

    async def authenticate(self, request: Request) -> bool:
        token = request.session.get("bot_admin_token")
        return token == "authenticated"


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        from sqlalchemy import text
        async with bot_session_maker() as session:
            await session.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        logger.info(f"üìä –ë–î: {BOT_DATABASE_URL}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –±–æ—Ç–∞: {e}")
        raise
    
    yield
    
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞...")


def create_bot_admin_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –±–æ—Ç–∞"""
    
    app = FastAPI(
        title="HSE Quest Registration Bot Admin",
        description="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        version="1.0.0",
        lifespan=lifespan,
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # Middleware
    app.add_middleware(SessionMiddleware, secret_key=SECRET_KEY)
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∫—É
    admin = Admin(
        app=app, 
        engine=bot_engine, 
        authentication_backend=BotAdminAuth(secret_key=SECRET_KEY),
        title="Bot Registration Admin",
        logo_url=None
    )
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–æ—Ç–∞
    setup_bot_admin_views(admin)
    
    return app


def setup_bot_admin_views(admin: Admin):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–æ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)
    class BotUserAdmin(ModelView, model=User):
        column_list = [
            User.id, User.full_name, User.telegram_id, 
            User.telegram_username, User.role, User.is_looking_for_friends,
            User.created_at
        ]
        column_searchable_list = [User.full_name, User.telegram_username]
        column_sortable_list = [User.id, User.full_name, User.created_at]
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã - SQLAdmin –Ω–µ –º–æ–∂–µ—Ç –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        column_filters = []
        
        # –ü–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        form_columns = [
            User.full_name, User.telegram_id, User.telegram_username, 
            User.role, User.is_looking_for_friends
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        name = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        name_plural = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" 
        icon = "fa-solid fa-users"
        page_size = 50
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        column_default_sort = [(User.created_at, True)]  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    
    # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (email –∏ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    class BotUserProfileAdmin(ModelView, model=UserProfile):
        column_list = [UserProfile.id, "user", UserProfile.email, UserProfile.created_at]
        column_searchable_list = [UserProfile.email]
        column_sortable_list = [UserProfile.id, UserProfile.created_at]
        
        form_columns = ["user", UserProfile.email]
        
        name = "üìß –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        name_plural = "üìß –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        icon = "fa-solid fa-address-card"
        page_size = 50
        
        column_default_sort = [(UserProfile.created_at, True)]
    
    # –ö–æ–º–∞–Ω–¥—ã (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –±–æ—Ç–∞)
    class BotCommandAdmin(ModelView, model=Command):
        column_list = [
            Command.id, Command.name, Command.event, Command.language_id, 
            Command.created_at
        ]
        column_searchable_list = [Command.name]
        column_sortable_list = [Command.id, Command.name, Command.created_at]
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è relationship –ø–æ–ª–µ–π
        column_filters = []
        
        form_columns = [Command.name, Command.event, Command.language_id]
        
        name = "‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã"
        name_plural = "‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã"
        icon = "fa-solid fa-users-gear"
        page_size = 50
        
        column_default_sort = [(Command.created_at, True)]
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–º)
    class BotCommandsUserAdmin(ModelView, model=CommandsUser):
        column_list = ["command", "user", CommandsUser.role]
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è relationship –ø–æ–ª–µ–π
        column_filters = []
        column_sortable_list = []
        
        form_columns = ["command", "user", CommandsUser.role]
        
        name = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥"
        name_plural = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥"
        icon = "fa-solid fa-user-group"
        page_size = 100
    
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (UUID —Å—Å—ã–ª–∫–∏)
    class BotCommandInviteAdmin(ModelView, model=CommandInvite):
        column_list = [
            CommandInvite.id, "command", 
            CommandInvite.invite_uuid, CommandInvite.created_at
        ]
        column_searchable_list = [CommandInvite.invite_uuid]
        column_sortable_list = [CommandInvite.id, CommandInvite.created_at]
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è relationship –ø–æ–ª–µ–π
        column_filters = []
        
        form_columns = ["command", CommandInvite.invite_uuid]
        
        name = "üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"
        name_plural = "üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"
        icon = "fa-solid fa-link"
        page_size = 50
        
        column_default_sort = [(CommandInvite.created_at, True)]
    
    # –†–æ–ª–∏ —Å–∏—Å—Ç–µ–º—ã
    class BotRoleAdmin(ModelView, model=Role):
        column_list = [Role.id, Role.name, Role.created_at]
        column_searchable_list = [Role.name]
        column_sortable_list = [Role.id, Role.name, Role.created_at]
        
        form_columns = [Role.name]
        
        name = "üé≠ –†–æ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"
        name_plural = "üé≠ –†–æ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"
        icon = "fa-solid fa-user-tag"
    
    # –†–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
    class BotRoleUserCommandAdmin(ModelView, model=RoleUserCommand):
        column_list = [RoleUserCommand.id, RoleUserCommand.name, RoleUserCommand.created_at]
        column_searchable_list = [RoleUserCommand.name]
        column_sortable_list = [RoleUserCommand.id, RoleUserCommand.name, RoleUserCommand.created_at]
        
        form_columns = [RoleUserCommand.name]
        
        name = "üëë –†–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"
        name_plural = "üëë –†–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"
        icon = "fa-solid fa-crown"
    
    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    class BotEventAdmin(ModelView, model=Event):
        column_list = [Event.id, Event.name, Event.start_time, Event.end_time, Event.created_at]
        column_searchable_list = [Event.name]
        column_sortable_list = [Event.id, Event.name, Event.start_time, Event.created_at]
        
        form_columns = [Event.name, Event.start_time, Event.end_time]
        
        name = "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        name_plural = "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        icon = "fa-solid fa-calendar-days"
    
    # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    class BotLanguageAdmin(ModelView, model=BotLanguage):
        column_list = [BotLanguage.id, BotLanguage.name, BotLanguage.created_at]
        column_searchable_list = [BotLanguage.name]
        column_sortable_list = [BotLanguage.id, BotLanguage.name, BotLanguage.created_at]
        
        form_columns = [BotLanguage.name]
        
        name = "üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
        name_plural = "üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
        icon = "fa-solid fa-code"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ—Ç–∞
    admin.add_view(BotUserAdmin)
    admin.add_view(BotUserProfileAdmin)
    admin.add_view(BotCommandAdmin)
    admin.add_view(BotCommandsUserAdmin)
    admin.add_view(BotCommandInviteAdmin)
    admin.add_view(BotRoleAdmin)
    admin.add_view(BotRoleUserCommandAdmin)
    admin.add_view(BotEventAdmin)
    admin.add_view(BotLanguageAdmin)


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_bot_admin_app()


if __name__ == "__main__":
    import uvicorn
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    logger.info(f"üë§ –õ–æ–≥–∏–Ω: {BOT_ADMIN_USERNAME}")
    logger.info(f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(BOT_ADMIN_PASSWORD)}")
    logger.info("üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8002/admin")
    logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {BOT_DATABASE_URL}")
    
    uvicorn.run(
        "bot_admin_app:app",
        host="0.0.0.0",
        port=8002,
        reload=True,
        log_level="info"
    ) 