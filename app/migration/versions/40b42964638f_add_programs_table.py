"""add_programs_table

Revision ID: 40b42964638f
Revises: dd26045f2dd9
Create Date: 2025-04-22 15:22:02.138141

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '40b42964638f'
down_revision: Union[str, None] = 'dd26045f2dd9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Создаем таблицу programs
    op.create_table('programs',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Float(), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Удаляем временную таблицу
    op.drop_table('_alembic_tmp_users')
    
    # Используем batch_alter_table для изменения внешних ключей в таблице attempts
    # В SQLite это создает новую таблицу, копирует данные и переименовывает
    with op.batch_alter_table('attempts', schema=None) as batch_op:
        # Пересоздаем все внешние ключи с нужными параметрами ondelete
        # Мы не удаляем существующие ключи по именам, так как SQLite этого не поддерживает
        batch_op.create_foreign_key('fk_attempts_users', 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('fk_attempts_commands', 'commands', ['command_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('fk_attempts_questions', 'questions', ['question_id'], ['id'], ondelete='SET NULL')
        batch_op.create_foreign_key('fk_attempts_attempttypes', 'attempttypes', ['attempt_type_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Возвращаем таблицу attempts к исходному состоянию
    with op.batch_alter_table('attempts', schema=None) as batch_op:
        # В SQLite при использовании batch_alter_table старые ограничения автоматически удаляются
        # Создаем внешние ключи с исходными параметрами (без ondelete)
        batch_op.create_foreign_key('fk_attempts_users', 'users', ['user_id'], ['id'])
        batch_op.create_foreign_key('fk_attempts_commands', 'commands', ['command_id'], ['id'])
        batch_op.create_foreign_key('fk_attempts_questions', 'questions', ['question_id'], ['id'])
        batch_op.create_foreign_key('fk_attempts_attempttypes', 'attempttypes', ['attempt_type_id'], ['id'])
    
    # Воссоздаем временную таблицу _alembic_tmp_users
    op.create_table('_alembic_tmp_users',
    sa.Column('full_name', sa.VARCHAR(), nullable=False),
    sa.Column('telegram_id', sa.INTEGER(), nullable=False),
    sa.Column('telegram_username', sa.VARCHAR(), nullable=False),
    sa.Column('role_id', sa.INTEGER(), nullable=True),
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('is_looking_for_friends', sa.BOOLEAN(), server_default=sa.text("'False'"), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Удаляем таблицу programs
    op.drop_table('programs')
    # ### end Alembic commands ###
